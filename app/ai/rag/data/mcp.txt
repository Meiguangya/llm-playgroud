MCP 是一个开放协议，它标准化了应用程序向大型语言模型 (LLM) 提供上下文的方式。MCP 就像 AI 应用程序的 USB-C 端口一样。正如 USB-C 提供了一种标准化的方式将您的设备连接到各种外围设备和配件一样，MCP 也提供了一种标准化的方式将 AI 模型连接到不同的数据源和工具。MCP 使您能够在 LLM 之上构建代理和复杂的工作流，并将您的模型与世界连接起来。
MCP 提供：
越来越多的预建集成可供您的 LLM 直接插入
为 AI 应用程序构建自定义集成的标准化方法
每个人都可以自由实施和使用的开放协议
在不同应用程序之间切换并随身携带上下文的灵活性

MCP 提供：
越来越多的预建集成可供您的 LLM 直接插入
为 AI 应用程序构建自定义集成的标准化方法
每个人都可以自由实施和使用的开放协议
在不同应用程序之间切换并随身携带上下文的灵活性


概念

架构概述

模型上下文协议 (MCP) 概述讨论了其范围和核心概念，并提供了演示每个核心概念的示例。

由于 MCP SDK 简化了许多关注点，大多数开发者可能会发现数据层协议部分最有用。它讨论了 MCP 服务器如何为 AI 应用程序提供上下文。

范围

模型上下文协议包括以下项目：
MCP 规范：MCP 的规范，概述了客户端和服务器的实施要求。
MCP SDK：针对实现 MCP 的不同编程语言的 SDK。
MCP 开发工具：用于开发 MCP 服务器和客户端的工具，包括MCP 检查器
MCP 参考服务器实现：MCP 服务器的参考实现。

MCP 的概念
参与者

MCP 采用客户端-服务器架构，其中 MCP 主机（例如Claude Code或Claude Desktop等 AI 应用程序）与一个或多个 MCP 服务器建立连接。MCP 主机通过为每个 MCP 服务器创建一个 MCP 客户端来实现这一点。每个 MCP 客户端与其对应的 MCP 服务器保持一对一的专用连接。
MCP架构的主要参与者包括：
MCP Host：协调和管理一个或多个 MCP 客户端的 AI 应用程序
MCP 客户端：维护与 MCP 服务器的连接并从 MCP 服务器获取上下文以供 MCP 主机使用的组件
MCP 服务器：为 MCP 客户端提供上下文的程序
例如：Visual Studio Code 充当 MCP 主机。当 Visual Studio Code 建立与 MCP 服务器（例如Sentry MCP 服务器）的连接时，Visual Studio Code 运行时会实例化一个 MCP 客户端对象，用于维护与 Sentry MCP 服务器的连接。当 Visual Studio Code 随后连接到另一个 MCP 服务器（例如本地文件系统服务器）时，Visual Studio Code 运行时会实例化另一个 MCP 客户端对象来维护此连接，从而保持 MCP 客户端与 MCP 服务器之间的一对一关系。

请注意，MCP 服务器指的是提供上下文数据的程序，无论其运行在何处。MCP 服务器可以在本地或远程执行。例如，当 Claude Desktop 启动文件系统服务器时，由于使用 STDIO 传输，该服务器在同一台计算机上本地运行。这通常被称为“本地”MCP 服务器。官方 Sentry MCP 服务器运行在 Sentry 平台上，并使用 Streamable HTTP 传输。这通常被称为“远程”MCP 服务器。


图层

MCP由两层组成：
数据层：定义基于 JSON-RPC 的客户端-服务器通信协议，包括生命周期管理，以及核心原语，如工具、资源、提示和通知。
传输层：定义实现客户端和服务器之间数据交换的通信机制和渠道，包括传输特定的连接建立、消息框架和授权。
从概念上讲，数据层是内层，而传输层是外层。

数据层
数据层实现了基于JSON-RPC 2.0 的交换协议，定义了消息结构和语义。该层包括：
生命周期管理：处理客户端和服务器之间的连接初始化、功能协商和连接终止
服务器功能：使服务器能够提供核心功能，包括用于 AI 操作的工具、用于上下文数据的资源以及来自客户端和发送到客户端的交互模板提示
客户端功能：使服务器能够要求客户端从主机 LLM 进行采样，从用户那里获取输入，并将消息记录到客户端
实用功能：支持附加功能，例如实时更新通知和长期运行操作的进度跟踪


传输层
传输层管理客户端和服务器之间的通信通道和身份验证。它负责处理 MCP 参与者之间的连接建立、消息传输和安全通信。
MCP 支持两种传输机制：
Stdio 传输：使用标准输入/输出流在同一台机器上的本地进程之间进行直接进程通信，从而提供最佳性能且无网络开销。
可流式传输的 HTTP 传输：使用 HTTP POST 协议发送客户端到服务器的消息，并可选用服务器发送事件来实现流式传输功能。此传输协议支持远程服务器通信，并支持标准 HTTP 身份验证方法，包括持有者令牌、API 密钥和自定义标头。MCP 建议使用 OAuth 获取身份验证令牌。
传输层从协议层抽象出通信细节，从而实现所有传输机制中相同的 JSON-RPC 2.0 消息格式。

数据层协议

MCP 的核心部分是定义 MCP 客户端和 MCP 服务器之间的模式和语义。开发人员可能会发现数据层（尤其是原语集）是 MCP 中最有趣的部分。它定义了开发人员如何从 MCP 服务器向 MCP 客户端共享上下文。
MCP 使用JSON-RPC 2.0作为底层 RPC 协议。客户端和服务端可以互相发送请求并做出响应。当不需要响应时，可以使用通知功能。
